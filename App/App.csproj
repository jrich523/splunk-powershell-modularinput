<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- default settings -->
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>1.0</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{2146681F-33E5-4078-9F6D-AC880E7AC699}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>NotUsed</RootNamespace>
    <AssemblyName>DeleteMe</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
    <FileAlignment>512</FileAlignment>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>$(SolutionDir)Output\Debug</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>$(SolutionDir)Output\Release</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Content Include="SA-ModularInput-PowerShell\bin\Modules\LocalStorage\LocalStorage.psm1">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="SA-ModularInput-PowerShell\default\app.conf">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="SA-ModularInput-PowerShell\default\data\ui\nav\default.xml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="SA-ModularInput-PowerShell\default\data\ui\views\examples.xml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <SubType>Designer</SubType>
    </Content>
    <Content Include="SA-ModularInput-PowerShell\default\data\ui\views\install.xml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <SubType>Designer</SubType>
    </Content>
    <Content Include="SA-ModularInput-PowerShell\metadata\default.meta">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="SA-ModularInput-PowerShell\README\sample_input.xml">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="SA-ModularInput-PowerShell\README\README.md">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="SA-ModularInput-PowerShell\appserver\static\appIcon.png">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="SA-ModularInput-PowerShell\appserver\static\appIcon.xcf" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\ModularPowerShell\ModularPowerShell.csproj">
      <!-- note this special output location -->
      <DestinationSubDirectory>SA-ModularInput-PowerShell\bin\</DestinationSubDirectory>
      <Project>{582fd7ff-27bc-4754-8360-92ad1f6604bf}</Project>
      <Name>ModularPowerShell</Name>
      <Private>True</Private>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <Content Include="SA-ModularInput-PowerShell\default\props.conf">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="SA-ModularInput-PowerShell\README\inputs.conf.spec">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
    <ItemGroup>
    <Compile Include="Properties\AssemblyInfo.cs" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="System" />
  </ItemGroup>
  <!-- App is a package for creating the Splunk app structure in visual studio.
       If we wanted to turn this into a re-usable recipe for creating splunk apps
       we could remove the stuff from here down and stick it in a splunk.targets file.
  -->
  <Import Project="$(MSBuildToolsPath)\Microsoft.Common.targets" />
  <!-- For now  "App" is a C# application, since that was the simplest way to get it to show up nicely
       *** But that means that building produces output. ***

       To fix that, we override the BuildDependsOn step, and prevent calling CopyFilesToOutputDirectory
       That way, although we produce a .dll, it's never copied to the output folder.
       Then we add these two steps (which were part of CopyFilesToOutputDirectory):
        _CopyFilesMarkedCopyLocal - Copy the output from referenced projects 
        _CopySourceItemsToOutputDirectory - Copy the "Content" items from this project
  -->
  <PropertyGroup>
    <!-- this is a minimal build which doesn't copy the compiled output of "App" (See Above) -->
    <BuildDependsOn>BeforeBuild;BuildOnlySettings;ResolveReferences;ResolveKeySource;
      AssignTargetPaths;_CopyFilesMarkedCopyLocal;_CopySourceItemsToOutputDirectory;
      AfterBuild;
    </BuildDependsOn>
  </PropertyGroup>
  <!-- We need to package our binaries up, so we have some extra steps here -->
  <!-- These depend on files that are in a solution-level folder .7zip (like .nuget) -->
  
  
  
    
  <PropertyGroup>
    <SevenZipPath>$(SolutionDir).nuget\7za.exe</SevenZipPath>
    <ZipFilePath Condition="$(ZipFilePath) == ''">$(OutputPath)SA-ModularInput-PowerShell.7z</ZipFilePath>
    <TarFilePath Condition="$(TarFilePath) == ''">$(OutputPath)SA-ModularInput-PowerShell.tar.gz</TarFilePath>
    <Files Condition="$(Files) == ''">$(OutputPath)\*</Files>
    
    <!-- See http://msdn.microsoft.com/en-us/magazine/dd419659.aspx#id0090093 -->
    <CleanDependsOn>CleanZip;$(CleanDependsOn);</CleanDependsOn>
    <ZipDependsOn>Build;</ZipDependsOn>    
  </PropertyGroup>
  
  <Target Name="CleanZip" BeforeTargets="Zip">
    <Delete Files="$(ZipFilePath)"/>
  </Target>
  
  <Target Name="CleanTar" BeforeTargets="Tar">
    <Delete Files="$(TarFilePath)"/>
  </Target>
      
  <Target Name="Zip" DependsOnTargets="$(ZipDependsOn)" Inputs="$(OutputPath)" Outputs="$(ZipFilePath)">
    <Message Importance="Low" Text="7Zip executable: $(SevenZipPath)"/>
    <Error Condition="'$(SevenZipPath)' == '' Or !Exists($(SevenZipPath))" Text="7za.exe is not available." />

    <Exec WorkingDirectory="$(OutputPath)" Outputs="$(ZipFilePath)" Command="&quot;$(SevenZipPath)&quot; a -mx9 -x!*.vshost.exe -x!*.7z -x!*.gz -x!*.zip &quot;$(ZipFilePath)&quot; &quot;$(Files)&quot;" />
  </Target>
  
  <Target Name="Tar" DependsOnTargets="Build" AfterTargets="Build" Inputs="$(OutputPath)" Outputs="$(TarFilePath)">
    <ItemGroup>
      <SourceFiles Include="@(FileWrites)" Exclude="**\bin\*.pdb;**\bin\*.xml;**\*.cache" />
    </ItemGroup>
    
    <Message Importance="Low" Text="7Zip executable: $(SevenZipPath)"/>
    <Error Condition="'$(SevenZipPath)' == '' Or !Exists($(SevenZipPath))" Text="7za.exe is not available." />

    <Exec WorkingDirectory="$(OutputPath)" Command="&quot;$(SevenZipPath)&quot; a -ttar -so  -x!*.vshost.exe -x!*.7z  -x!*.pdb -x!*.gz -x!*.zip stdout @(SourceFiles -> '&quot;%(Identity)&quot;', ' ') | &quot;$(SevenZipPath)&quot; a -si -tgzip -mx9 &quot;$(TarFilePath)&quot;"/>
  </Target>
  
  <!--
  <PropertyGroup>
    <MSBuildCommunityTasksPath>$(SolutionDir)\packages\MSBuildTasks.1.4.0.56\tools</MSBuildCommunityTasksPath>
  </PropertyGroup>
  <ItemGroup>
    <ZipFiles Include="$(OutputPath)**\*.*" Exclude="@(DefaultExclude)" />
  </ItemGroup>

  <Import Project="$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.targets" />
  <Target Name="AfterBuild">
    <Zip Files="@(ZipFiles)" WorkingDirectory="$(OutputPath)" ZipFilePath="$(OutputPath)SA-ModularInput-PowerShell.tar.gz" />
  </Target>
  -->
</Project>